
import Papa from 'papaparse';
import { CSVEmployeeData, RowData, ValidationResult } from '@/types';
import { validateEmployeeData } from './validationUtils';
import { formatDateToYYYYMMDD } from './dateUtils';

/**
 * Parses and validates a CSV file containing employee data
 */
export const parseEmployeeCSV = (file: File): Promise<ValidationResult> => {
  return new Promise((resolve, reject) => {
    Papa.parse<Record<string, string>>(file, {
      header: true,
      skipEmptyLines: true,
      complete: (results) => {
        const validEmployees: CSVEmployeeData[] = [];
        const invalidRows: {row: CSVEmployeeData, errors: string[], rowData: RowData}[] = [];
        
        // Debug: Log the parse results
        console.log(`CSV parse complete. Found ${results.data.length} rows:`, results);
        
        // Skip processing if no rows were found
        if (results.data.length === 0) {
          console.log("No data rows found in CSV");
          resolve({ validEmployees: [], invalidRows: [] });
          return;
        }
        
        // Process each row
        results.data.forEach((row, index) => {
          // Skip empty rows
          if (Object.values(row).every(val => val === null || val === '')) {
            return;
          }
          
          // Check multiple possible header names for user_id field with better detection
          // This handles different header variations including "User ID" with space
          const userId = 
            row.userId || 
            row.user_id || 
            row.userid || 
            row['User ID'] || 
            row['user id'] || 
            row['USER ID'] || 
            row['UserId'] || 
            '';

          // Check multiple possible header names for emp_id field with better detection
          const empId = (
            row.emp_id || 
            row.empId || 
            row.employee_id || 
            row.employeeId || 
            row.EmployeeID ||
            row['Employee ID'] ||
            row['emp id'] ||
            row['EMP ID'] ||
            ''
          ).trim();
          
          // Format dates and handle multiple possible header names for date fields
          const rawDateOfJoining = 
            row.date_of_joining || 
            row['date of joining'] || 
            row.dateOfJoining || 
            row.DateOfJoining || 
            '';
            
          const rawDateOfBirth =
            row.date_of_birth || 
            row['date of birth'] || 
            row.dateOfBirth || 
            row.DateOfBirth || 
            '';
          
          // Properly format dates to YYYY-MM-DD format
          const dateOfJoining = formatDateToYYYYMMDD(rawDateOfJoining);
          const dateOfBirth = formatDateToYYYYMMDD(rawDateOfBirth);
          
          console.log(`Row ${index} date conversion:`, {
            rawDateOfJoining,
            formattedDateOfJoining: dateOfJoining,
            rawDateOfBirth,
            formattedDateOfBirth: dateOfBirth
          });
          
          // Convert CSV data to employee format - exclude id field so Supabase will auto-generate a UUID
          const employeeData: CSVEmployeeData = {
            userId: userId, 
            emp_id: empId,
            name: row.name || '',
            email: row.email || '',
            phone: row.phone || null,
            city: row.city || null,
            cluster: row.cluster || null,
            manager: row.manager || null,
            role: row.role || '',
            password: row.password || 'changeme123',
            date_of_joining: dateOfJoining || null,
            date_of_birth: dateOfBirth || null,
            blood_group: row.blood_group || row['blood group'] || null,
            account_number: row.account_number || row['account number'] || null,
            ifsc_code: row.ifsc_code || row['ifsc code'] || null
          };

          // Generate a structured data object for display
          const rowData: RowData = {
            id: 'Auto-generated', // UUID will be auto-generated by Supabase
            userId: userId, 
            emp_id: empId,
            name: row.name || '',
            email: row.email || '',
            phone: row.phone || '',
            city: row.city || '',
            cluster: row.cluster || '',
            manager: row.manager || '',
            role: row.role || '',
            password: row.password || 'changeme123',
            date_of_joining: rawDateOfJoining || '', // Keep original format for display
            date_of_birth: rawDateOfBirth || '', // Keep original format for display
            blood_group: row.blood_group || row['blood group'] || '',
            account_number: row.account_number || row['account number'] || '',
            ifsc_code: row.ifsc_code || row['ifsc code'] || ''
          };

          console.log(`Validating row ${index}:`, employeeData);

          // Validate the data using the common validation function
          const validation = validateEmployeeData({
            ...employeeData
          });
          
          if (validation.isValid) {
            validEmployees.push({
              ...employeeData,
              password: employeeData.password || 'changeme123' // Ensure password is set
            });
          } else {
            invalidRows.push({ 
              row: {
                ...employeeData
              }, 
              errors: validation.errors,
              rowData
            });
          }
        });

        console.log('Validation complete:', {
          validEmployees: validEmployees.length,
          invalidRows: invalidRows.length
        });
        
        // Debug: Log the valid employees for troubleshooting
        if (validEmployees.length > 0) {
          console.log('Valid employees ready for upload:', validEmployees);
        }
        
        if (invalidRows.length > 0) {
          console.log('Invalid rows:', invalidRows);
        }

        resolve({ validEmployees, invalidRows });
      },
      error: (error) => {
        console.error('CSV parsing error:', error);
        reject(error);
      }
    });
  });
};

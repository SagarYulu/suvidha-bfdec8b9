
import Papa from 'papaparse';
import { CSVEmployeeData, RowData, ValidationResult } from '@/types';
import { validateEmployeeDataWithMasterData } from './validationUtils';
import { formatDateToYYYYMMDD } from './dateUtils';
import { getRoles, getCities, getClusters } from '@/services/masterDataService';

/**
 * Parses and validates a CSV file containing employee data
 */
export const parseEmployeeCSV = async (file: File): Promise<ValidationResult> => {
  try {
    // First fetch master data from the database
    const [roles, cities, clusters] = await Promise.all([
      getRoles(),
      getCities(),
      getClusters()
    ]);

    const masterData = {
      roles: roles || [],
      cities: cities || [],
      clusters: clusters || []
    };

    console.log('Master data loaded for validation:', masterData);

    return new Promise((resolve, reject) => {
      Papa.parse<Record<string, string>>(file, {
        header: true,
        skipEmptyLines: true,
        complete: async (results) => {
          const validEmployees: CSVEmployeeData[] = [];
          const invalidRows: {row: CSVEmployeeData, errors: string[], rowData: RowData}[] = [];
          
          // Debug: Log the parse results
          console.log(`CSV parse complete. Found ${results.data.length} rows:`, results);
          
          // Process each row
          for (const [index, row] of results.data.entries()) {
            // Skip empty rows
            if (Object.values(row).every(val => val === null || val === '')) {
              continue;
            }
            
            // Add debug log to check the original CSV data
            console.log(`[Row ${index}] Original CSV row:`, row);
            
            // Check multiple possible header names for user_id field with better detection
            // This handles different header variations including "User ID" with space
            const userId = 
              row.userId || 
              row.user_id || 
              row.userid || 
              row['User ID'] || 
              row['user id'] || 
              row['USER ID'] || 
              row['UserId'] || 
              '';

            // Check multiple possible header names for emp_id field with better detection
            // Ensure emp_id is properly trimmed to avoid whitespace issues
            const empId = (
              row.emp_id || 
              row.empId || 
              row.employee_id || 
              row.employeeId || 
              row.EmployeeID ||
              row['Employee ID'] ||
              row['emp id'] ||
              row['EMP ID'] ||
              ''
            ).trim();
            
            // Convert CSV data to employee format - exclude id field so auto-generated
            const employeeData: Partial<CSVEmployeeData> = {
              userId: userId, // Set the userId field explicitly
              emp_id: empId,
              name: row.name || '',
              email: row.email || '',
              phone: row.phone || null,
              city: row.city || null,
              cluster: row.cluster || null,
              manager: row.manager || null,
              role: row.role || '',
              date_of_joining: row.date_of_joining || null,
              date_of_birth: row.date_of_birth || null,
              blood_group: row.blood_group || null,
              account_number: row.account_number || null,
              ifsc_code: row.ifsc_code || null,
              password: row.password || 'changeme123', // Use provided password or default
            };

            // Generate a structured data object for display
            const rowData: RowData = {
              id: 'Auto-generated', // Will be auto-generated by database
              userId: userId, // Include userId field
              emp_id: empId,
              name: row.name || '',
              email: row.email || '',
              phone: row.phone || '',
              city: row.city || '',
              cluster: row.cluster || '',
              manager: row.manager || '',
              role: row.role || '',
              date_of_joining: row.date_of_joining || '',
              date_of_birth: row.date_of_birth || '',
              blood_group: row.blood_group || '',
              account_number: row.account_number || '',
              ifsc_code: row.ifsc_code || '',
              password: row.password || 'changeme123' // Use provided password or default
            };

            // Add debug log to check extracted values
            console.log(`[Row ${index}] Processing CSV row:`, { 
              originalRow: row,
              extractedUserId: userId,
              extractedEmpId: empId,
              parsedData: employeeData
            });

            // Validate the data using the master data validation function
            const validation = await validateEmployeeDataWithMasterData({
              ...employeeData,
              user_id: employeeData.userId // Map userId to user_id for validation
            }, masterData);
            
            if (validation.isValid) {
              validEmployees.push({
                ...employeeData as CSVEmployeeData,
                // Convert dates to YYYY-MM-DD format for database
                date_of_joining: formatDateToYYYYMMDD(employeeData.date_of_joining || null),
                date_of_birth: formatDateToYYYYMMDD(employeeData.date_of_birth || null),
                password: employeeData.password || 'changeme123' // Ensure password is set
              });
            } else {
              invalidRows.push({ 
                row: {
                  ...employeeData as CSVEmployeeData
                }, 
                errors: validation.errors,
                rowData
              });
            }
          }

          console.log('Validation complete:', {
            validEmployees: validEmployees.length,
            invalidRows: invalidRows.length
          });
          
          // Debug: Log the valid employees for troubleshooting
          if (validEmployees.length > 0) {
            console.log('Valid employees ready for upload:', validEmployees);
          }

          resolve({ validEmployees, invalidRows });
        },
        error: (error: any) => {
          console.error('CSV parsing error:', error);
          reject(error);
        }
      });
    });
  } catch (error) {
    console.error('Error fetching master data for validation:', error);
    throw error;
  }
};
